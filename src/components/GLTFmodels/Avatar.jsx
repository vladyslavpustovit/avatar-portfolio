/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, {useEffect, useRef} from "react";
import {useAnimations, useFBX, useGLTF} from "@react-three/drei";
import {useFrame} from "@react-three/fiber";
import {useControls} from "leva";
import * as THREE from 'three'
export function Avatar(props) {

    const {animation} = props;

    // Leva controls
    const { headFollow, cursorFollow, wireframe } = useControls({
        headFollow: false,
        cursorFollow: false,
        wireframe: false
    })
    // Group reference
    const group = useRef()

    // Retrieve Nodes & Materials from the loaded model
    const { nodes, materials } = useGLTF("models/avatar.glb");

    const { animations: typingAnimation } = useFBX("animations/Typing.fbx");
    const { animations: standingAnimation } = useFBX("animations/Standing.fbx");
    const { animations: wavingAnimation } = useFBX("animations/Waving.fbx");

    // Rename animations
    typingAnimation[0].name = 'Typing';
    standingAnimation[0].name = 'Standing';
    wavingAnimation[0].name = 'Waving';

    // Use animations
    const { actions } = useAnimations([
        typingAnimation[0],
        standingAnimation[0],
        wavingAnimation[0]],
        group);

    // Follow user actions
    useFrame((state) => {
        if (headFollow) {
            group.current.getObjectByName('Head').lookAt(state.camera.position)
        }
        if (cursorFollow) {
            const target = new THREE.Vector3(state.mouse.x, state.mouse.y, 1);
            group.current.getObjectByName('Spine2').lookAt(target)
        }
    })

    // Play animation
    useEffect(() => {
        actions[animation].reset().fadeIn(0.5).play();
        return () => {
            actions[animation].reset().fadeOut(1);
        }
    }, [animation]);

    // Set material to wireframe
    useEffect(() => {
        Object.values(materials).forEach((material)=>{
            material.wireframe = wireframe;
        })
    }, [wireframe]);

    return (
        <group {...props} ref={group} dispose={null}>
            <primitive object={nodes.Hips} />
            <skinnedMesh
                name="EyeLeft"
                geometry={nodes.EyeLeft.geometry}
                material={materials.Wolf3D_Eye}
                skeleton={nodes.EyeLeft.skeleton}
                morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
                morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
            />
            <skinnedMesh
                name="EyeRight"
                geometry={nodes.EyeRight.geometry}
                material={materials.Wolf3D_Eye}
                skeleton={nodes.EyeRight.skeleton}
                morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
                morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
            />
            <skinnedMesh
                name="Wolf3D_Head"
                geometry={nodes.Wolf3D_Head.geometry}
                material={materials.Wolf3D_Skin}
                skeleton={nodes.Wolf3D_Head.skeleton}
                morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
                morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
            />
            <skinnedMesh
                name="Wolf3D_Teeth"
                geometry={nodes.Wolf3D_Teeth.geometry}
                material={materials.Wolf3D_Teeth}
                skeleton={nodes.Wolf3D_Teeth.skeleton}
                morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
                morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
            />
            <skinnedMesh
                geometry={nodes.Wolf3D_Hair.geometry}
                material={materials.Wolf3D_Hair}
                skeleton={nodes.Wolf3D_Hair.skeleton}
            />
            <skinnedMesh
                name="Wolf3D_Outfit_Top"
                geometry={nodes.Wolf3D_Outfit_Top.geometry}
                material={materials.Wolf3D_Outfit_Top}
                skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
                morphTargetDictionary={nodes.Wolf3D_Outfit_Top.morphTargetDictionary}
                morphTargetInfluences={nodes.Wolf3D_Outfit_Top.morphTargetInfluences}
            />
            <skinnedMesh
                name="Wolf3D_Outfit_Bottom"
                geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
                material={materials.Wolf3D_Outfit_Bottom}
                skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
                morphTargetDictionary={nodes.Wolf3D_Outfit_Bottom.morphTargetDictionary}
                morphTargetInfluences={nodes.Wolf3D_Outfit_Bottom.morphTargetInfluences}
            />
            <skinnedMesh
                name="Wolf3D_Outfit_Footwear"
                geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
                material={materials.Wolf3D_Outfit_Footwear}
                skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
                morphTargetDictionary={
                    nodes.Wolf3D_Outfit_Footwear.morphTargetDictionary
                }
                morphTargetInfluences={
                    nodes.Wolf3D_Outfit_Footwear.morphTargetInfluences
                }
            />
            <skinnedMesh
                name="Wolf3D_Body"
                geometry={nodes.Wolf3D_Body.geometry}
                material={materials.Wolf3D_Body}
                skeleton={nodes.Wolf3D_Body.skeleton}
                morphTargetDictionary={nodes.Wolf3D_Body.morphTargetDictionary}
                morphTargetInfluences={nodes.Wolf3D_Body.morphTargetInfluences}
            />
        </group>
    );
}

useGLTF.preload("models/avatar.glb");
